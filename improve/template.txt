本阶段主要针对C++==泛型编程==和==STL==技术做详细讲解，探讨C++更深层的使用

模板 template
    概念：
        模板就是建立通用的模具，大大提高复用性
    局限：
        1.模板不能直接使用，只是一个框架
        2.模板不是万能的
    分类：
        函数模板
        类模板


函数模板：  FuncTemp
    作用：
        建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。
    语法：  basis.cpp
        template<typename T>
        函数声明或定义（如果后面是个函数，就是函数模板）
    语法解释：
        template --- 声明创建模板
        typename --- 表明其后面的符号是一种数据类型，可以用class代替
        T --- 通用的数据类型，名称可以替换，通常为大写字母
    注意事项：  attention.cpp
        1.自动类型推导，必须推导出一致的数据类型T,才可以使用
        2.模板必须要确定出T的数据类型，才可以使用
    与普通函数的区别：  FunDifference.cpp
        1.普通函数调用时可以发生自动类型转换（隐式类型转换）
        2.函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换
        3.如果利用显示指定类型的方式，可以发生隐式类型转换
        总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T
    调用规则：  CallRules.cpp
        1.如果函数模板和普通函数都可以实现，优先调用普通函数
        2.可以通过空模板参数列表来强制调用函数模板
        3.函数模板也可以发生重载
        4.如果函数模板可以产生更好的匹配,优先调用函数模板（如不发生隐式类型转换）
        总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性
    局限性：  limitation.cpp
        模板不是万能的，有些特殊数据类型，需要用具体化的方式做特殊实现
        如果T的数据类型传入的是像Person这样的自定义数据类型，无法正常运行
        解决方法一：运算符重载（太麻烦）
        解决方法二：提供模板的重载，可以为这些特定的类型提供具体化的模板，具体化优先调用
                template<>bool myCompare(Person &a, Person &b)
        总结：学习模板并不是为了写模板，而是在STL能够运用系统提供的模板


类模板：  ClassTemp   
    注意：写模板的时候始终要记得用< >将参数模板化
    作用：
        建立一个通用类，类中的成员 数据类型可以不具体制定，用一个虚拟的类型来代表。
    语法：  basis.cpp
        template<typename T>
        类
    语法解释：
        template --- 声明创建模板
        typename --- 表明其后面的符号是一种数据类型，可以用class代替
        T --- 通用的数据类型，名称可以替换，通常为大写字母
    与函数模板的区别：  TempDifference.cpp
        1.类模板没有自动类型推导的使用方式
        2.类模板在模板参数列表中可以有默认参数
    成员函数创建时机：  Member.cpp
        类模板中成员函数和普通类中成员函数创建时机是有区别的：
            普通类中的成员函数一开始就可以创建
            类模板中的成员函数 一开始不创建 在调用时才创建
    对象做函数参数：  ObjBePara.cpp
        类模板实例化出的对象，向函数传参的方式
        三种传入方式：
            1.指定传入的类型 --- 直接显示对象的数据类型
                *第一种最常用，后面两种相当于函数模板配合类模板
            2.参数模板化 --- 将对象中的参数变为模板进行传递  
                通过typeid(T1).name()查看推出的数据类型
            3.整个类模板化 --- 将这个对象类型 模板化进行传递
    继承：  inherit.cpp
        当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型
        如果不指定，编译器无法给子类分配内存              
            ex:class Son: public Base<int>
        如果想灵活指定出父类中T的类型，子类也需变为类模板  
            ex:template<class T>
               class Son2: public Base<T>
    成员函数类外实现：  FuncOutside.cpp
        语法：
            加上模板、模板参数列表、作用域及参数列表
            template<class T1, class T2>
            Person<T1, T2>::
    分文件编写：  Sub-file
        问题：
            类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到
        解决：
            解决方式1：直接包含.cpp源文件
            解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制
            一般用第二种方法
    友元：  friend.cpp
        类模板配合友元函数的类内和类外实现
        全局函数类内实现 - 直接在类内声明友元即可  
        全局函数类外实现 - 需要提前让编译器知道全局函数的存在
            类外实现时，类内声明是普通函数，而类外实现是模板的实现 
            1.需要加上空模板参数列表 < >
            2.提前让编译器知道全局函数的存在  很复杂，要把很多东西放在文件的开头
        总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别