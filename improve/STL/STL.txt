基本概念:
    STL(Standard Template Library,标准模板库)
    STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator)
    容器和算法之间通过迭代器进行无缝连接。
    STL 几乎所有的代码都采用了模板类或者模板函数
STL六大组件
    STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器
        1.容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。
        2.算法：各种常用的算法，如sort、find、copy、for_each等
        3.迭代器：扮演了容器与算法之间的胶合剂。
        4.仿函数：行为类似函数，可作为算法的某种策略。————重载()
        5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。
        6.空间配置器：负责空间的配置与管理。


STL初识： 
    **容器：**置物之所也
        STL容器就是将运用最广泛的一些数据结构实现出来
        常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等
        这些容器分为序列式容器和关联式容器两种:
            ​序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。
            关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系
    **算法：**问题之解法也
        有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)
        算法分为:质变算法和非质变算法。
        质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等
        非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等
    **迭代器：**容器和算法之间粘合剂
        提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。
        每个容器都有自己专属的迭代器
        迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针
    举例：  vector1.cpp  vector2.cpp  NestedVector.cpp
        容器： vector
            STL中最常用的容器为Vector，可以理解为数组
            容器在使用前需要声明，包含头文件 比如#include<vector>
        算法： for_each
            #include<algorithm>
            for_each(_InputIterator __first, _InputIterator __last, _Function __f)
        迭代器： vector<int>::iterator
            .begin()
            .end()
        注意自定义数据类型中： (*it).m_name 和  it->m——name 是等价的
        ！！！！：    *it就是 <> 中的数据类型
    容器嵌套容器  NestedVector.cpp
        第一层：vector<vector<int>>::iterator it = v.begin();   *it的数据类型为vector<int>
        第二层：vector<int>::iterator it2 = (*it).begin();      *it2的数据类型为int


string容器：  string
    本质：
        string是C++风格的字符串，而string本质上是一个类
    string和char * 区别：
        char * 是一个指针
        string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。
    特点：
        string 类内部封装了很多成员方法
        例如：查找find，拷贝copy，删除delete 替换replace，插入insert
        string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责
    构造函数：
        string(); //创建一个空的字符串 例如: string str;
        string(const char* s); //使用字符串s初始化
            ***C语言中字符串常量的本质表示其实是一个地址
            *C语言中操作字符串是通过它在内存中的存储单元的首地址进行的，这是字符串的终极本质
        string(const string& str); //使用一个string对象初始化另一个string对象
        string(int n, char c); //使用n个字符c初始化
    赋值操作：
        1. = 号赋值： 
            string& operator=(const char* s); //char*类型字符串 赋值给当前的字符串
            string& operator=(const string &s); //把字符串s赋给当前的字符串
            string& operator=(char c); //字符赋值给当前的字符串
        2.assign赋值：
            string& assign(const char *s); //把字符串s赋给当前的字符串
            string& assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串
            string& assign(const string &s); //把字符串s赋给当前字符串
            string& assign(int n, char c); //用n个字符c赋给当前字符串
    拼接操作：
        1. + 号拼接： 
            string& operator+=(const char* str); //追加一个字符串常量
            string& operator+=(const char c); //追加一个字符
            string& operator+=(const string& str); //追加一个字符串
        2.append拼接
            string& append(const char *s); //把字符串s连接到当前字符串结尾
            string& append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾
            string& append(const string &s); //同operator+=(const string& str)
            string& append(const string &s, int pos, int n);//字符串s中从pos开始的n个字符连接到字符串结尾
    查找和替换：
        查找：查找指定字符串是否存在 find是左查找，rfind是右查找
            int find(const string& str, int pos = 0) const; //查找str第一次出现位置,从pos开始查找
            int find(const char* s, int pos = 0) const; //查找s第一次出现位置,从pos开始查找
            int find(const char* s, int pos, int n) const; //从pos位置查找s的前n个字符第一次位置
            int find(const char c, int pos = 0) const; //查找字符c第一次出现位置
            int rfind(const string& str, int pos = npos) const; //查找str最后一次位置,从pos开始查找
            int rfind(const char* s, int pos = npos) const; //查找s最后一次出现位置,从pos开始查找
            int rfind(const char* s, int pos, int n) const; //从pos查找s的前n个字符最后一次位置
            int rfind(const char c, int pos = 0) const; //查找字符c最后一次出现位置
        替换：在指定的位置替换字符串
            string& replace(int pos, int n, const string& str); //替换从pos开始n个字符为字符串str
            string& replace(int pos, int n,const char* s); //替换从pos开始的n个字符为字符串s
        总结：
            find查找是从左往后，rfind从右往左
            find找到字符串后返回查找的第一个字符位置，找不到返回-1
            replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串
    比较操作：
        字符串比较是按字符的ASCII码进行对比
        = 返回 0         > 返回 1           < 返回 -1
        int compare(const string &s) const; //与字符串s比较
        int compare(const char *s) const; //与字符串常量s比较
    存取操作：
        通过 .size()访问字符串长度
        char& operator[](int n); //通过[]方式取字符
        char& at(int n); //通过at方法获取字符
    插入和删除：
        string& insert(int pos, const char* s); //插入字符串
        string& insert(int pos, const string& str); //插入字符串
        string& insert(int pos, int n, char c); //在指定位置插入n个字符c
        string& erase(int pos, int n = npos); //删除从Pos开始的n个字符
        总结：插入和删除的起始下标都是从0开始
    子串：
        从字符串中获取想要的子串
        string substr(int pos = 0, int n = npos) const; //返回由pos开始的n个字符组成的字符串
        .substr(1, 3);    从s[1]开始截取3个字符
        pos = .find("@");   .substr(0, pos);  从s[0]开始截取到  @  为止 


vector容器：  vector
    功能：
        vector数据结构和数组非常相似，也称为单端数组（看图）
        vector与普通数组区别：
            不同之处在于数组是静态空间，而vector可以动态扩展
    动态扩展：
        并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间
        vector容器的迭代器是支持随机访问的迭代器
    初始化：
        int i(10); //i = 10
        vector<int> v(10); //10个0
         vector<int> v{10}; //1个10
        vector<string> vs{10};//10个" "//列表初始化：只要能当作元素初始值那它就是初始值，不能时考虑其他初始化
        vector<string> vs(10);//10个" "
    构造函数：
        vector<T> v; //采用模板实现类实现，默认构造函数
        vector(v.begin(), v.end()); //将  v [ begin(), end() )  区间中的元素拷贝给本身。(前闭后开)
        vector(n, elem); //构造函数将n个elem拷贝给本身。
        vector(const vector &vec); //拷贝构造函数。
    赋值操作：
        vector& operator=(const vector &vec);//重载等号操作符
        assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。
        assign(n, elem); //将n个elem拷贝赋值给本身。
    容量和大小：
        empty(); //判断容器是否为空
        capacity(); //容器的容量
        size(); //返回容器中元素的个数
        resize(int num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。
        ​   //如果容器变短，则末尾超出容器长度的元素被删除。
        resize(int num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。
        ​   //如果容器变短，则末尾超出容器长度的元素被删除
    插入和删除：
        push_back(ele); //尾部插入元素ele
        pop_back(); //删除最后一个元素
        insert(const_iterator pos, ele); //迭代器指向位置pos插入元素ele
        insert(const_iterator pos, int count,ele);//迭代器指向位置pos插入count个元素ele
        erase(const_iterator pos); //删除迭代器指向的元素
        erase(const_iterator start, const_iterator end);//删除迭代器从start到end之间的元素
        clear(); //删除容器中所有元素
    数据存取：
        at(int idx); //返回索引idx所指的数据
        operator[]; //返回索引idx所指的数据
        front(); //返回容器中第一个数据元素
        back(); //返回容器中最后一个数据元素
    互换容器:
        功能描述：
            实现两个容器内元素进行互换，可以达到实用的收缩内存效果
        函数原型：
            swap(vec); // 将vec与本身的元素互换
        实际用途：
            巧用swap收缩内存
            vector<int>(v).swap(v);
            vector<int>(v) 是匿名对象，利用拷贝构造函数创建了一个新的对象
            匿名对象运行完后自动析构
    预留空间：
        功能描述：
            减少vector在动态扩展容量时的扩展次数
        函数原型：
            reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问。


deque容器：   deque
    基本概念：
        双端数组，可以对头端进行插入删除操作（个人理解：有点像二维数组）
        deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据
        中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间
    deque与vector区别：
        vector对于头部的插入删除效率低，数据量越大，效率越低
        deque相对而言，对头部的插入删除速度回比vector快
        vector访问元素时的速度会比deque快,这和两者内部实现有关
    构造函数：
        deque<T> deqT; //默认构造形式
        deque(beg, end); //构造函数将[beg, end)区间中的元素拷贝给本身。
        deque(n, elem); //构造函数将n个elem拷贝给本身。
        deque(const deque &deq); //拷贝构造函数
    赋值操作：
        deque& operator=(const deque &deq); //重载等号操作符
        assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。
        assign(n, elem); //将n个elem拷贝赋值给本身。
    大小操作：
        deque.empty(); //判断容器是否为空
        deque.size(); //返回容器中元素的个数
        deque.resize(num); //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。
        ​ //如果容器变短，则末尾超出容器长度的元素被删除。
        deque.resize(num, elem); //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。
        ​ //如果容器变短，则末尾超出容器长度的元素被删除。
        总结：deque没有容量的概念
    插入和删除:
        两端插入操作：
            push_back(elem); //在容器尾部添加一个数据
            push_front(elem); //在容器头部插入一个数据
            pop_back(); //删除容器最后一个数据
            pop_front(); //删除容器第一个数据
        指定位置操作：
            insert(pos,elem); //在pos位置插入一个elem元素的拷贝，返回新数据的位置。
            insert(pos,n,elem); //在pos位置插入n个elem数据，无返回值。
            insert(pos,beg,end); //在pos位置插入[beg,end)区间的数据，无返回值。
            clear(); //清空容器的所有数据
            erase(beg,end); //删除[beg,end)区间的数据，返回下一个数据的位置。
            erase(pos); //删除pos位置的数据，返回下一个数据的位置。
            总结：插入和删除提供的位置是迭代器！
                 在insert和erase的时候可以通过迭代器改变区间的位置
                 deque<int>::iterator it = d.begin();
                 it = it + 1;
    数据存取：
        at(int idx); //返回索引idx所指的数据
        operator[]; //返回索引idx所指的数据
        front(); //返回容器中第一个数据元素
        back(); //返回容器中最后一个数据元素
    排序：
        算法：sort(iterator beg, iterator end) //对beg和end区间内元素进行排序
        使用时包含头文件 algorithm。 sort 默认规则为升序，对于支持随机访问迭代器的容器，都可以利用sort算法对其进行排序


stack容器：   stack
        stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口
        栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为
    构造函数：
        stack<T> stk; //stack采用模板类实现， stack对象的默认构造形式
        stack(const stack &stk); //拷贝构造函数
    赋值操作：
        stack& operator=(const stack &stk); //重载等号操作符
    数据存取：
        push(elem); //向栈顶添加元素
        pop(); //从栈顶移除第一个元素
        top(); //返回栈顶元素
    大小操作：
        empty(); //判断堆栈是否为空
        size(); //返回栈的大小


queue容器：   queue
        Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口
        队列容器允许从一端新增元素，从另一端移除元素
        队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为
    构造函数：
        queue<T> que; //queue采用模板类实现，queue对象的默认构造形式
        queue(const queue &que); //拷贝构造函数
    赋值操作：
        queue& operator=(const queue &que); //重载等号操作符
    数据存取：
        push(elem); //往队尾添加元素
        pop(); //从队头移除第一个元素
        back(); //返回最后一个元素
        front(); //返回第一个元素
    大小操作：
        empty(); //判断堆栈是否为空 1为空 0非空
        size(); //返回栈的大小


list容器：    list
    基本知识:
        STL中的链表是一个双向循环链表
        由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器
        List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的(因为list是动态存储的)
        总结：STL中List和vector是两个最常被使用的容器，各有优缺点
    构造函数：
        list<T> lst; //list采用采用模板类实现,对象的默认构造形式。
        list(beg,end); //构造函数将[beg, end)区间中的元素拷贝给本身。
        list(n,elem); //构造函数将n个elem拷贝给本身。
        list(const list &lst); //拷贝构造函数。
    赋值和交换：
        assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身。
        assign(n, elem); //将n个elem拷贝赋值给本身。
        list& operator=(const list &lst); //重载等号操作符
        swap(lst); //将lst与本身的元素互换
    大小操作：
        size(); //返回容器中元素的个数
        empty(); //判断容器是否为空
        resize(num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。
        ​ //如果容器变短，则末尾超出容器长度的元素被删除。
        resize(num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。
        //如果容器变短，则末尾超出容器长度的元素被删除。
    插入和删除：
        push_back(elem);//在容器尾部加入一个元素
        pop_back();//删除容器中最后一个元素
        push_front(elem);//在容器开头插入一个元素
        pop_front();//从容器开头移除第一个元素
        记得用迭代器表示pos的位置
        insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。
        insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。
        insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。
        clear();//移除容器的所有数据
        erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。
        erase(pos);//删除pos位置的数据，返回下一个数据的位置。
        不用迭代器就可以remove
        remove(elem);//删除容器中所有与elem值匹配的元素。
    数据存取：
        front(); //返回第一个元素。
        back(); //返回最后一个元素。
        总结：list容器中不可以通过[]或者at方式访问数据(因为list不是用连续的线性空间存储数据)
              迭代器不支持随机访问，但可通过++进行访问如L.insert(++it, 1000);//也可多次++
              it = it + 1;//错误，不可以跳跃访问，即使是+1（因为+1可以说明+n同样也可以）
              it++; 可以，正常后移，没有跳跃操作
              一般的支持随机访问 it = it + 1;正确 支持双向it++;it--;正确
    反序和排序：
        reverse(); //反转链表
        sort(); //链表排序 （sort算法只支持随机访问迭代器的容器）
        总结：反序和排序是通过容器的成员函数实现，不像前面几种容器通过算法实现
              （所有不支持随机访问的迭代器，不可以使用标准算法）
              （不支持随机访问的迭代器，内部会提供对应的一些算法）
              （自定义数据类型排序必须指定规则，函数重载）


set容器：     set
    简介：
        所有元素都会在插入时自动被排序，只能通过insert插入
    本质：
        set/multiset属于关联式容器，底层结构是用二叉树实现。
    set和multiset区别：
        set不允许容器中有重复的元素
        multiset允许容器中有重复的元素
    构造：
        set<T> st; //默认构造函数：
        set(const set &st); //拷贝构造函数
    赋值：
        set& operator=(const set &st); //重载等号操作符
    大小和交换：
        size(); //返回容器中元素的数目(因为不存在重复的值，因此不能resize——默认用0填充)
        empty(); //判断容器是否为空
        swap(st); //交换两个集合容器
    插入和删除：
        insert(elem); //在容器中插入元素。
        clear(); //清除所有元素
        erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。
        erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。
        erase(elem); //删除容器中值为elem的元素。
    查找和统计:
        find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();
        count(key); //统计key的元素个数（对于set，结果为0或者1）
    set和multiset区别：
        set不可以插入重复数据，而multiset可以
        set插入数据的同时会返回插入结果，表示插入是否成功
        multiset不会检测数据，因此可以插入重复数据
    pair对组创建:
        成对出现的数据，利用对组可以返回两个数据
        pair<type, type> p ( value1, value2 );
        pair<type, type> p = make_pair( value1, value2 );
    排序：
        set容器默认排序规则为从小到大，利用仿函数，可以改变排序规则
        operator()
        内置数据类型：
            改变排序规则为从大到小
            set<int,myCompare>
            建立一个类实现仿函数，因为本身是需要返回一个布尔类型的函数，而set< , >中左右两边需要两个数据类型，因此需要在class myCompare中重载()
        自定义数据类型：
            插入的时候不知道怎么排序，因此需要仿函数指定排序规则
            set<Person, comparePerson>


map容器：     map
    简介：
        map中所有元素都是pair
        pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）
        it->first == (*it).first
        所有元素都会根据元素的键值key自动排序
    本质：
        map/multimap属于关联式容器，底层结构是用二叉树实现。
    优点：
        可以根据key值快速找到value值
    map和multimap区别：
        map不允许容器中有重复key值元素(如果有重复，value为第一次插入key时的value值)
        multimap允许容器中有重复key值元素
    构造:
        map<T1, T2> mp; //map默认构造函数  
        map(const map &mp); //拷贝构造函数
    赋值：
        map& operator=(const map &mp); //重载等号操作符
        map中所有元素都是成对出现，插入数据时候要使用对组
    大小和交换：
        size(); //返回容器中元素的数目
        empty(); //判断容器是否为空
        swap(st); //交换两个集合容器
    插入和删除：
        insert(elem); //在容器中插入元素。
        []//下标插入
        clear(); //清除所有元素
        erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。
        erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。
        erase(key); //删除容器中值为key的元素。
    查找和统计：
        find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();
        count(key); //统计key的元素个数（对于map，结果为0或者1）
    排序：
        map容器默认排序规则为按照key值进行 从小到大排序，利用仿函数，可以改变排序规则
        对于自定义数据类型，map必须要指定排序规则,同set容器


常用容器：
    priority_queue：用于堆的实现（默认为大顶堆）
        bool empty() const//返回值为true，说明队列为空；
        int size() const//返回优先队列中元素的数量；
        void pop()//删除队列顶部的元素，也即根节点
        int top()//返回队列中的顶部元素，但不删除该元素；
        void push(int arg)//将元素arg插入到队列之中；
        举例：
            priority_queue<int> big_heap;//大顶堆
            priority_queue<int,vector<int>,greater<int> > small_heap;//小顶堆
    unordered_map：哈希表（unordered_multimap）
    unordered_set：哈希表（unordered_multiset）


函数对象：    仿函数
    概念：
        重载函数调用操作符()的类，其对象常称为函数对象
        函数对象使用重载的()时，行为类似函数调用，也叫仿函数
    本质：
        函数对象(仿函数)是一个类，不是一个函数
    使用：
        1.函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值
        2.函数对象超出普通函数的概念，函数对象可以有自己的状态
        3.函数对象可以作为参数传递
    谓词:
        概念：
            返回bool类型的仿函数称为谓词
            如果operator()接受一个参数，那么叫做一元谓词
            如果operator()接受两个参数，那么叫做二元谓词
    内建函数对象:(本质为类模板)
        概念：
            STL内建了一些函数对象
        用法：
            这些仿函数所产生的对象，用法和一般函数完全相同
            使用内建函数对象，需要引入头文件 #include<functional>
        算术仿函数:
            实现四则运算,其中negate是一元运算，其他都是二元运算
            //二元仿函数<>中只写一个类型（只允许同类型操作）
            template<class T> T plus<T> //加法仿函数
            template<class T> T minus<T> //减法仿函数
            template<class T> T multiplies<T> //乘法仿函数
            template<class T> T divides<T> //除法仿函数
            template<class T> T modulus<T> //取模仿函数
            template<class T> T negate<T> //取反仿函数
        关系仿函数:
            实现关系对比
            template<class T> bool equal_to<T> //等于
            template<class T> bool not_equal_to<T> //不等于
            template<class T> bool greater<T> //大于    sort(v.begin(), v.end(), greater<int>());
            template<class T> bool greater_equal<T> //大于等于
            template<class T> bool less<T> //小于
            template<class T> bool less_equal<T> //小于等于
        逻辑仿函数:
            实现逻辑运算
            template<class T> bool logical_and<T> //逻辑与
            template<class T> bool logical_or<T> //逻辑或
            template<class T> bool logical_not<T> //逻辑非


算法：
    算法主要是由头文件<algorithm> <functional> <numeric>组成。
    <algorithm>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等
    <numeric>体积很小，只包括几个在序列上面进行简单数学运算的模板函数
    <functional>定义了一些模板类,用以声明函数对象。
    遍历：
        for_each(iterator beg, iterator end, _func);// _func 函数或者函数对象
        transform(iterator beg1, iterator end1, iterator beg2, _func);
            目标容器提前开辟空间
    查找：
        find(iterator beg, iterator end, value);
            查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()
            自定义数据类型要重载 ==
        find_if(iterator beg, iterator end, _Pred);
            按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
            _Pred 函数或者谓词（返回bool类型的仿函数）
        adjacent_find(iterator beg, iterator end);
            查找相邻重复元素,返回相邻元素的第一个位置的迭代器
            //记得用于面试
        binary_search(iterator beg, iterator end, value);
            查找指定的元素，查到 返回true 否则false   (bool) 
            // 注意: 在无序序列中不可用
        count(iterator beg, iterator end, value);
            统计元素出现次数
            自定义数据类型要重载 ==
        count_if(iterator beg, iterator end, _Pred);
            按条件统计元素出现次数// _Pred 谓词
    排序：
        sort(iterator beg, iterator end, _Pred);
            按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
            //默认从小到大
            //从大到小 greater<int> ()
        random_shuffle(iterator beg, iterator end);
            洗牌 指定范围内的元素随机调整次序 使用时记得加随机数种子
        merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);
            容器元素合并，并存储到另一容器中
            // dest 目标容器开始迭代器
            // 注意: 两个容器必须是有序的
        reverse(iterator beg, iterator end);
            反转指定范围的元素
    拷贝和替换：
        copy(iterator beg, iterator end, iterator dest);
            按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
            // dest 目标起始迭代器
            利用copy算法在拷贝时，目标容器记得提前开辟空间
        replace(iterator beg, iterator end, oldvalue, newvalue);
            将区间内旧元素 替换成 新元素
            // oldvalue 旧元素  newvalue 新元素
        replace_if(iterator beg, iterator end, _pred, newvalue)
            按条件替换元素，满足条件的替换成指定元素
        swap(container c1, container c2);
            互换两个容器的元素 注意交换的容器要同种类型
    算术生成：
        算术生成算法属于小型算法，使用时包含的头文件为 #include <numeric>
        accumulate(iterator beg, iterator end, value);
            计算区间内 容器元素累计总和
            // value 起始累加值
        fill(iterator beg, iterator end, value);
            向容器中填充指定的元素
    集合运算：
        set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);
            求两个容器的交集
            // 注意:两个集合必须是有序序列
            //目标容器开辟空间需要从两个容器中取小值
            //set_intersection返回值既是交集中最后一个元素的位置
            //遍历时用返回得到的迭代器（因为你开辟的时候空间可能大了）
              itEnd = set_intersection(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());
	          for_each(vTarget.begin(), itEnd, myPrint());
        set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);
            求两个集合的并集
            // 注意:两个集合必须是有序序列
            //目标容器开辟空间需要两个容器相加
            //set_union返回值既是并集中最后一个元素的位置
        set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);
            求两个集合的差集
            // 注意:两个集合必须是有序序列
            //目标容器开辟空间需要从两个容器取较大值
            //set_difference返回值既是差集中最后一个元素的位置
        


        

        
